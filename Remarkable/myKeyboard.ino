/* Seabird_pC08_20220321, with row0 not connected. The row0 here is row1 on PCB */
/*
KEY(0, 0, KEY_RESERVED),
  KEY(0, 1, KEY_RESERVED),
  KEY(0, 2, KEY_RESERVED),
  KEY(0, 3, KEY_RIGHT),
  KEY(0, 4, KEY_RESERVED),
  KEY(0, 5, KEY_RESERVED),
  KEY(0, 6, KEY_RESERVED),
  KEY(0, 7, KEY_N),
  KEY(0, 8, KEY_B),
  KEY(0, 9, KEY_V),
  KEY(0, 10, KEY_D),
  KEY(0, 11, KEY_X),
  KEY(0, 12, KEY_Z),
  KEY(0, 13, KEY_RESERVED),
  KEY(0, 14, KEY_LEFTSHIFT),
  KEY(1, 0, KEY_RESERVED),
  KEY(1, 1, KEY_RESERVED),
  KEY(1, 2, KEY_RESERVED),
  KEY(1, 3, KEY_RESERVED),
  KEY(1, 4, KEY_DOWN),
  KEY(1, 5, KEY_RESERVED),
  KEY(1, 6, KEY_RESERVED),
  KEY(1, 7, KEY_H),
  KEY(1, 8, KEY_G),
  KEY(1, 9, KEY_F),
  KEY(1, 10, KEY_C),
  KEY(1, 11, KEY_RESERVED),
  KEY(1, 12, KEY_RESERVED),
  KEY(1, 13, KEY_END),
  KEY(1, 14, KEY_RESERVED),
  KEY(2, 0, KEY_LEFTCTRL),
  KEY(2, 1, KEY_LEFTALT),
  KEY(2, 2, KEY_RESERVED),
  KEY(2, 3, KEY_BACKSPACE),
  KEY(2, 4, KEY_BACKSLASH),
  KEY(2, 5, KEY_LEFT),
  KEY(2, 6, KEY_ENTER),
  KEY(2, 7, KEY_7),
  KEY(2, 8, KEY_T),
  KEY(2, 9, KEY_E),
  KEY(2, 10, KEY_R),
  KEY(2, 11, KEY_W),
  KEY(2, 12, KEY_Q),
  KEY(2, 13, KEY_RESERVED),
  KEY(2, 14, KEY_RESERVED),
  KEY(3, 0, KEY_RESERVED),
  KEY(3, 1, KEY_RESERVED),
  KEY(3, 2, KEY_RESERVED),
  KEY(3, 3, KEY_EQUAL),
  KEY(3, 4, KEY_0),
  KEY(3, 5, KEY_I),
  KEY(3, 6, KEY_UP),
  KEY(3, 7, KEY_Y),
  KEY(3, 8, KEY_6),
  KEY(3, 9, KEY_5),
  KEY(3, 10, KEY_4),
  KEY(3, 11, KEY_3),
  KEY(3, 12, KEY_CAPSLOCK),
  KEY(3, 13, KEY_S),
  KEY(3, 14, KEY_A),
  KEY(4, 0, KEY_RESERVED),
  KEY(4, 1, KEY_RESERVED),
  KEY(4, 2, KEY_HOME),
  KEY(4, 3, KEY_P),
  KEY(4, 4, KEY_O),
  KEY(4, 5, KEY_K),
  KEY(4, 6, KEY_U),
  KEY(4, 7, KEY_8),
  KEY(4, 8, KEY_RESERVED),
  KEY(4, 9, KEY_RESERVED),
  KEY(4, 10, KEY_RESERVED),
  KEY(4, 11, KEY_2),
  KEY(4, 12, KEY_1),
  KEY(4, 13, KEY_RESERVED),
  KEY(4, 14, KEY_RESERVED),
  KEY(5, 0, KEY_RESERVED),
  KEY(5, 1, KEY_RESERVED),
  KEY(5, 2, KEY_RESERVED),
  KEY(5, 3, KEY_SEMICOLON),
  KEY(5, 4, KEY_L),
  KEY(5, 5, KEY_9),
  KEY(5, 6, KEY_J),
  KEY(5, 7, KEY_GRAVE),
  KEY(5, 8, KEY_RESERVED),
  KEY(5, 9, KEY_RESERVED),
  KEY(5, 10, KEY_RESERVED),
  KEY(5, 11, KEY_RESERVED),
  KEY(5, 12, KEY_TAB),
  KEY(5, 13, KEY_RESERVED),
  KEY(5, 14, KEY_RIGHTSHIFT),
  KEY(6, 0, KEY_RESERVED),
  KEY(6, 1, KEY_RIGHTALT),
  KEY(6, 2, KEY_SPACE),
  KEY(6, 3, KEY_SLASH),
  KEY(6, 4, KEY_DOT),
  KEY(6, 5, KEY_COMMA),
  KEY(6, 6, KEY_M),
  KEY(6, 7, KEY_APOSTROPHE),
  KEY(6, 8, KEY_RESERVED),
  KEY(6, 9, KEY_RESERVED),
  KEY(6, 10, KEY_RESERVED),
  KEY(6, 11, KEY_RESERVED),
  KEY(6, 12, KEY_RESERVED),
  KEY(6, 13, KEY_RESERVED),
  KEY(6, 14, KEY_RESERVED),
};
*/

//cccc rrr e
#define KEYB(ROW,COL,MOD) {(ROW<<1 | COL<<4),(MOD)}
#define NONE     0x00
#define SHIFT    0x01
#define ALT      0x02
#define INVALID  0x80


const uint8_t kbd[256][2] =
{
  KEYB(0,0,INVALID),     //0
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),     //8
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),     //16
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //24
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //32
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //40
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),   //48
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //56
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),  

  KEYB(0,0,INVALID),   //64  @
  KEYB(3,14,SHIFT),    //-a
  KEYB(0, 8,SHIFT),     //b
  KEYB(1,10,SHIFT),    //c
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //72
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),   //80
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //88
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //96 - grave

  KEYB(3,14,NONE),    //-a
  KEYB(0,8,NONE),     //b
  KEYB(1,10,NONE),    //c
  KEYB(2,6,NONE),     //d - enter
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //104
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),   //112
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),   //120
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),  

  KEYB(0,0,INVALID),   //128
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),  

    KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),

  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID),
  KEYB(0,0,INVALID)
};





void SendKeyboard_char(uint8_t data)
{
  uint8_t resp[2] = {0x00,0x01};
  uint8_t shift[2] =   {((5<<1)|(14<<4)|(1)),0x01};
  uint8_t shiftup[2] = {((5<<1)|(14<<4)|(0)),0x01};

  if(!data)return;

  if(kbd[data][1] & SHIFT)   GeneralTxMessage(0x51,shift,2);

  resp[0] = kbd[data][0] | 0x01;
  GeneralTxMessage(0x51,resp,sizeof(resp));
  resp[0] = kbd[data][0] & 0xfe;
  GeneralTxMessage(0x51,resp,sizeof(resp));

  if(kbd[data][1] & SHIFT)   GeneralTxMessage(0x51,shiftup,2);
}
